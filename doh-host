#! /usr/bin/env python3
import argparse
import sys
from urllib.parse import urlsplit, urlunsplit
from uritemplate import URITemplate, expand
from base64 import urlsafe_b64encode
from hyper import HTTPConnection
from dnslib import DNSRecord


# Note: Google's DoH server currently requires the "ct" param from draft -04.
DOH_URI = "https://dns.google.com/experimental{?dns,ct}"

# Note: Cloudflare doesn't support GET yet.
#DOH_URI = "https://cloudflare-dns.com/dns-query{?dns}"

CONTENT_TYPE = "application/dns-udpwireformat"
GET_HEADERS = {
    "accept": CONTENT_TYPE
}

POST_HEADERS = {
    "accept": CONTENT_TYPE,
    "content-type": CONTENT_TYPE
}


def print_http_response(status, header, file):
    print("Status:", status, file=sys.stderr)
    print("Header:", file=file)
    for field, value in header:
        print("    {}: {}".format(
                str(field, "ascii"), str(value, "ascii")), file=file)

def create_query(hostname, qtype):
    record = DNSRecord.question(hostname, qtype)
    # normalize request for caching purposes by setting ID to zero, as per spec
    record.header.id = 0
    return record

def encode(data):
    # Google DNS doesn't like it when padding is removed, even though it's required
    # by the spec ("Padding characters for base64url MUST NOT be included.")
    #return str(urlsafe_b64encode(data), "ascii").replace("=", "")
    return urlsafe_b64encode(data)

def expand_template(template, query=None):
    ut = URITemplate(template)
    uri = ut.expand(dns=query, ct="") # Note: "ct" has been removed in draft-05!
    c = urlsplit(uri)
    target = urlunsplit(("", "", c.path, c.query, ""))
    return (c.hostname, c.port or 443, target)

def extract_result(response):
    record = DNSRecord.parse(response.read()) if response.status == 200 else None
    return (response.status, response.headers, record)

def query_get(host, port, target):
    with HTTPConnection(host, port) as conn:
        conn.request("GET", target, headers=GET_HEADERS)
        return extract_result(conn.get_response())

def query_post(host, port, target, data):
    with HTTPConnection(host, port) as conn:
        conn.request("POST", target, headers=POST_HEADERS, body=data)
        return extract_result(conn.get_response())


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="DNS-over-HTTPS lookup utility")
    parser.add_argument("hostname", metavar="hostname",
            help="the DNS name to look up")
    parser.add_argument("-p", "--post", action="store_true",
            help="use HTTP POST instead of GET")
    parser.add_argument("-t", "--type", default="ANY",
            help="query type (default: %(default)s)")
    parser.add_argument("-v", "--verbose", action="store_true",
            help="enable verbose output")
    args = parser.parse_args()


    query = create_query(args.hostname, args.type)
    if args.verbose:
        print(query, file=sys.stderr)

    if args.post:
        host, port, target = expand_template(DOH_URI)
        status, header, record = query_post(host, port, target, query.pack())
    else:
        host, port, target = expand_template(DOH_URI, encode(query.pack()))
        status, header, record = query_get(host, port, target)
    
    if args.verbose:
        print_http_response(status, header, sys.stderr)
    print(record)

# EOF
