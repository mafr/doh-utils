#! /usr/bin/env python3
import argparse
import sys
from urllib.parse import urlencode
from base64 import urlsafe_b64encode
from hyper import HTTPConnection
from dnslib import DNSRecord


DOH_HOST = "dns.google.com"
DOH_PORT = 443
DOH_PATH = "/experimental?"

HEADERS = {
    "accept": "application/dns-udpwirefomat"
}


def print_http_response(status, header, file):
    print("Status:", status, file=sys.stderr)
    print("Header:", file=file)
    for field, value in header:
        print("    {}: {}".format(
                str(field, "ascii"), str(value, "ascii")), file=file)


def query_get(host, port, path, record):
    with HTTPConnection(host, port) as conn:
        enc_query = urlsafe_b64encode(record.pack()) # TODO: strip padding
        # Note: the "ct" parameter was removed in draft -05
        params = urlencode({
            "ct": "",
            "dns": enc_query
        })
        conn.request("GET", path + params, headers=HEADERS)
        r = conn.get_response()
        return (r.status, r.headers, DNSRecord.parse(r.read()))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="DNS-over-HTTPS lookup utility")
    parser.add_argument("hostname", metavar="hostname", help="the DNS name to look up")
    parser.add_argument("-v", "--verbose", action="store_true",
            help="enable verbose output")
    args = parser.parse_args()

    query = DNSRecord.question(args.hostname, "ANY")
    if args.verbose:
        print(query, file=sys.stderr)

    status, header, record = query_get(DOH_HOST, DOH_PORT, DOH_PATH, query)
    
    if args.verbose:
        print_http_response(status, header, sys.stderr)
    print(record)

# EOF
