#! /usr/bin/env python3
import argparse
import sys
from urllib.parse import urlencode
from base64 import urlsafe_b64encode
from hyper import HTTPConnection
from dnslib import DNSRecord


#DOH_HOST = "dns.google.com"
#DOH_PORT = 443
#DOH_PATH = "/experimental"

DOH_HOST = "cloudflare-dns.com"
DOH_PORT = 443
DOH_PATH = "/dns-query"

CONTENT_TYPE = "application/dns-udpwireformat"
GET_HEADERS = {
    "accept": CONTENT_TYPE
}

POST_HEADERS = {
    "accept": CONTENT_TYPE,
    "content-type": CONTENT_TYPE
}


def print_http_response(status, header, file):
    print("Status:", status, file=sys.stderr)
    print("Header:", file=file)
    for field, value in header:
        print("    {}: {}".format(
                str(field, "ascii"), str(value, "ascii")), file=file)

def create_query(hostname, qtype):
    record = DNSRecord.question(hostname, qtype)
    # normalize request for caching purposes by setting ID to zero, as per spec
    record.header.id = 0
    return record

def encode(data):
    # Google DNS doesn't like it when padding is removed, even though it's required
    # by the spec ("Padding characters for base64url MUST NOT be included.")
    #return str(urlsafe_b64encode(data), "ascii").replace("=", "")
    return urlsafe_b64encode(data)

def extract_result(response):
    record = DNSRecord.parse(response.read()) if response.status == 200 else None
    return (response.status, response.headers, record)

def query_get(host, port, path, record):
    with HTTPConnection(host, port) as conn:
        params = urlencode({
            "ct": "",  # Note: the "ct" parameter was removed in draft -05
            "dns": encode(record.pack())
        })
        conn.request("GET", path + "?" + params, headers=GET_HEADERS)
        return extract_result(conn.get_response())

def query_post(host, port, path, record):
    with HTTPConnection(host, port) as conn:
        conn.request("POST", path, headers=POST_HEADERS, body=record.pack())
        return extract_result(conn.get_response())


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="DNS-over-HTTPS lookup utility")
    parser.add_argument("hostname", metavar="hostname",
            help="the DNS name to look up")
    parser.add_argument("-p", "--post", action="store_true",
            help="use HTTP POST instead of GET")
    parser.add_argument("-t", "--type", default="ANY",
            help="query type (default: %(default)s)")
    parser.add_argument("-v", "--verbose", action="store_true",
            help="enable verbose output")
    args = parser.parse_args()

    query = create_query(args.hostname, args.type)
    if args.verbose:
        print(query, file=sys.stderr)

    if args.post:
        status, header, record = query_post(DOH_HOST, DOH_PORT, DOH_PATH, query)
    else:
        status, header, record = query_get(DOH_HOST, DOH_PORT, DOH_PATH, query)
    
    if args.verbose:
        print_http_response(status, header, sys.stderr)
    print(record)

# EOF
